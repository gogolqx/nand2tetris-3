@256
D=A
@SP
M=D
// function Main.fibonacci 0
(Main.fibonacci)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
D=A+1
@SP
M=D
// push constant 2
@2
D=A
@SP
A=M
M=D
D=A+1
@SP
M=D
// lt
@SP
D=M-1
M=D
A=M
D=M
@R14
M=D
@SP
D=M-1
M=D
A=M
D=M
@R13
M=D
@R13
D=M
@R14
D=D-M
@e11c6080.LESS_THAN
D;JLT
D=0
@e11c6080.PUSH_RESULT
1;JMP
(e11c6080.LESS_THAN)
D=-1
(e11c6080.PUSH_RESULT)
@SP
A=M
M=D
D=A+1
@SP
M=D
// if-goto IF_TRUE
@SP
D=M-1
M=D
A=M
D=M
@$IF_TRUE
D;JNE
// goto IF_FALSE
@$IF_FALSE
1;JMP
// label IF_TRUE
($IF_TRUE)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
D=A+1
@SP
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
@R14
M=D
@SP
D=M-1
M=D
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@R13
D=M
@2
A=D-A
D=M
@THIS
M=D
@R13
D=M
@3
A=D-A
D=M
@ARG
M=D
@R13
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
1;JMP
// label IF_FALSE
($IF_FALSE)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
D=A+1
@SP
M=D
// push constant 2
@2
D=A
@SP
A=M
M=D
D=A+1
@SP
M=D
// sub
@SP
D=M-1
M=D
A=M
D=M
@R14
M=D
@SP
D=M-1
M=D
A=M
D=M
@R13
M=D
@R13
D=M
@R14
D=D-M
@SP
A=M
M=D
D=A+1
@SP
M=D
// call Main.fibonacci 1
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
D=A+1
@SP
M=D
// push constant 1
@1
D=A
@SP
A=M
M=D
D=A+1
@SP
M=D
// sub
@SP
D=M-1
M=D
A=M
D=M
@R14
M=D
@SP
D=M-1
M=D
A=M
D=M
@R13
M=D
@R13
D=M
@R14
D=D-M
@SP
A=M
M=D
D=A+1
@SP
M=D
// call Main.fibonacci 1
// add
@SP
D=M-1
M=D
A=M
D=M
@R13
M=D
@SP
D=M-1
M=D
A=M
D=M
@R14
M=D
@R13
D=M
@R14
D=D+M
@SP
A=M
M=D
D=A+1
@SP
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
@R14
M=D
@SP
D=M-1
M=D
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@R13
D=M
@2
A=D-A
D=M
@THIS
M=D
@R13
D=M
@3
A=D-A
D=M
@ARG
M=D
@R13
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
1;JMP
// function Sys.init 0
(Sys.init)
// push constant 4
@4
D=A
@SP
A=M
M=D
D=A+1
@SP
M=D
// call Main.fibonacci 1
// label WHILE
($WHILE)
// goto WHILE
@$WHILE
1;JMP
