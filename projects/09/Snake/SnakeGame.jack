class SnakeGame {
  field Snake snake;

  constructor SnakeGame new() {
    let snake = Snake.new(256, 128);

    return this;
  }

  method void dispose(){
    do snake.dispose();
    do Memory.deAlloc(this);
    return;
  }

  method void run(){
    var char key;
    var boolean exit, grow;
    var int direction; // 0=none,1=up,2=down,3=left,4=right

    let direction = 0;

    while (~exit) {
      // waits for a key to be pressed.
      while (key = 0) {
          let key = Keyboard.keyPressed();
          do moveSnake(direction, grow);
          do drawScreen();
      }

      if (key = 81) {
          let exit = true;
      }
      if (key = 88) {
          let grow = true;
      }
      if (key = 131) {
          let direction = 1;
      }
      if (key = 133) {
          let direction = 2;
      }
      if (key = 130) {
          let direction = 3;
      }
      if (key = 132) {
          let direction = 4;
      }

      // waits for the key to be released.
      while (~(key = 0)) {
          let key = Keyboard.keyPressed();
          do moveSnake(direction, grow);
          do drawScreen();
          let grow = false;
      }
    }
    return;
  }

  method void moveSnake(int direction, bool grow) {
      if (direction = 1) {
          do snake.crawlUp(grow);
      }
      if (direction = 2) {
          do snake.crawlDown(grow);
      }
      if (direction = 3) {
          do snake.crawlLeft(grow);
      }
      if (direction = 4) {
          do snake.crawlRight(grow);
      }

      do Sys.wait(5); // Delays the next movement.
      return;
  }

  method void drawScreen(){
    var PixelNode pix;

    do Screen.clearScreen();
    let pix = snake.first();

    while( ~(pix = null) ){
      do Screen.drawPixel(pix.x(), pix.y());
      let pix = pix.next();
    }
    return;
  }
}
